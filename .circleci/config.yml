version: 2.1

commands:
  destroy-cluster:
    description: Deletes cluster if there was an error
    steps:
      - run:
          name: Destroy cluster
          when: on_fail
          command: |
            kops delete cluster --name ${KOPS_CLUSTER_NAME} --state ${KOPS_STATE_STORE} --yes

  delete-sock-shop:
    description: Delete sock-shop if an error occurs
    steps:
      - run:
          name: Destroy cluster
          when: on_fail
          command: |
            kubectl delete -f microservices-demo/deploy/kubernetes/complete-demo.yaml


  # revert-migrations:
  #   description: Revert the last migration if successfully run in the current workflow.
  #   parameters:
  #     workflow:
  #       type: string
  #       default: "${CIRCLE_WORKFLOW_ID:0:7}"   
  #   steps:
  #     - run:
  #         name: Revert migrations
  #         when: on_fail
  #         command: |
  #           #!/bin/bash -eo pipefail
  #           SUCCESS=$(curl --insecure  https://kvdb.io/6f8V25HXvj7Nq8KzbefKYt/migration_${CIRCLE_WORKFLOW_ID:0:7})

  #           if(( $SUCCESS==1 )); 
  #           then
  #             cd ~/project/backend
  #             npm install
  #             npm run migration:revert
  #           fi
            
jobs:
  terraform-plan:
    docker:
      - image: 4568910/examcontainer
    steps:
      - checkout
      - restore_cache:
          keys: [terraform-init]
      - run:
          name: Terraform plan
          command: |
            terraform init
            terraform plan
      - save_cache:
          paths: [.terraform]
          key: terraform-init

  terraform-apply:
    docker:
      - image: 4568910/examcontainer
    steps:
      - checkout
      - restore_cache:
          keys: [terraform-init]
      - run:
          name: Terraform apply
          command: |
            terraform init
            terraform apply
      - save_cache:
          paths: [.terraform]
          key: terraform-init

  create-cluster:
    docker:
      - image: 4568910/examcontainer
    steps:
      - checkout
      - run:
          name: Create the cluster
          command: |
            kops create cluster \
            --name=${KOPS_CLUSTER_NAME} \
            --node-count 2 \
            --cloud=aws \
            --node-size ${NODE_SIZE} \
            --ssh-public-key=~/.ssh/id_rsa.pub \
            --zones=us-west-2a \
            --control-plane-size $CONTROL_PLANE_SIZE \
            --discovery-store=${KOPS_STATE_STORE}/${KOPS_CLUSTER_NAME}/discovery \
            --yes

            kops validate cluster --wait 10m

      - destroy-cluster

  deploy-sock-shop:
    docker:
      - image: 4568910/examcontainer
    steps:
      - checkout
      - run:
          name: Export Kubeconfig
          command: |
            kops export kubeconfig --admin

      - run:
          name: Deploy Sock-shop
          command: |
            kubectl create namespace sock-shop
            kubectl apply -f microservices-demo/deploy/kubernetes/complete-demo.yaml
      
      - delete-sock-shop
  
  deploy-ingress-controller:
    docker:
      - image: 4568910/examcontainer
    steps:
      - checkout
      - run:
          name: Export Kubeconfig
          command: |
            kops export kubeconfig --admin
            
      - run:
          name: Deploy ingress controller
          command: |
            kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.6.4/deploy/static/provider/cloud/deploy.yaml
      

  create-sockshop-ingress:
    docker:
      - image: 4568910/examcontainer
    steps:
      - checkout
      - run:
          name: Export Kubeconfig
          command: |
            kops export kubeconfig --admin

      - run:
          name: Create sock shop ingress and show load balancer url
          command: |
            sleep 20
            kubectl apply -f manifests/sock-ingress.yml 

            LB_ADDR=$(kubectl get svc -n ingress-nginx | grep Load | awk '{print $4}')
            LB_IP=$(timeout 3s traceroute $LB_ADDR | head -n 1 )
            echo "The Load Balancer DNS name is: ${LB_ADDR} and it's IP address is: ${LB_IP}"

  deploy-adminer-app:
    docker:
      - image: 4568910/examcontainer
    steps:
      - checkout
      - run:
          name: Export Kubeconfig
          command: |
            kops export kubeconfig --admin

      - run:
          name: Create adminer app and resource
          command: |

            sleep 20
            kubectl apply -f adminer

            echo ""
            echo "---------   -------NOTE!!!-----    --------------"
            LB_ADDR=$(kubectl get svc -n ingress-nginx | grep Load | awk '{print $4}')
            echo "$(timeout 3s traceroute $LB_ADDR | head -n 1 )"
            echo "NOTE the IP address of the LoadBalancer"
          
            echo "Use this info to configure the A name records in Route 53"  
            echo "---------   -------------------    --------------"

  deploy-monitoring:
    docker:
      - image: 4568910/examcontainer
    steps:
      - checkout
      - run:
          name: Export Kubeconfig
          command: |
            kops export kubeconfig --admin

      - run:
          name: Create monitoring app and resource
          command: |
            kubectl apply -f microservices-demo/deploy/kubernetes/manifests-monitoring

            kubectl apply -f manifests/monitoring-ingress.yml

            echo ""
            echo "---------   -------NOTE!!!-----    --------------"
            LB_ADDR=$(kubectl get svc -n ingress-nginx | grep Load | awk '{print $4}')
            echo "$(timeout 3s traceroute $LB_ADDR | head -n 1 )"
            echo "NOTE the IP address of the LoadBalancer"

            echo "Use this info to configure the A name records in Route 53" 
            echo "---------   -------------------    --------------"         


  delete-cluster:
    docker:
      - image: 4568910/examcontainer
    description: Deletes cluster 
    steps:
      - run:
          name: Destroy cluster
          command: |
            kops delete cluster --name ${KOPS_CLUSTER_NAME} --state ${KOPS_STATE_STORE} --yes


workflows:
  default:
    jobs:
      # - terraform-plan
      # - terraform-apply:
      #     requires: [terraform-plan]
      #     filters:
      #       branches:
      #         only: [master] 
      # - create-cluster:
      #     requires: [terraform-apply]
      #     filters:
      #       branches:
      #         only: [master]    
      # - deploy-sock-shop:
      #     requires: [create-cluster]
      # - deploy-ingress-controller:
      #     requires: [create-cluster]
      # - create-sockshop-ingress:
      #     requires: [deploy-ingress-controller]
      # - deploy-adminer-app:
      #     requires: [deploy-sock-shop]
      # - deploy-monitoring:
      #     requires: [deploy-adminer-app]
      - delete-cluster



